 Implement thumbnail loading (thumbs.db?)
  -queue a thumbnail load job instead of a normal one if the desired mips are small enough
  -queue both a thumbnail job and a normal job if needed?
  -need to know when thumbnail is enough and when not
  -thumbnails always have priority over normal jobs, since they will difinitely complete way faster
 
 fix center image getting darker issue

 fix zoom center going offscreeen suddenly when dragging around

 implement actual image filtering
 -> need FAST image filtering to improve user experience and reduce cpu usage
 
 arrow keyboard navigation
 
 when zoomed in on image:
  n/N counter to know at which image you are

 implement file change detection and handling
 -> file delete, and add (rename or move is delete/add) gets handled vy updating the file list
 -file change (content change including resolution) needs to be handled by the texture streamer:
 -> simply queue another image load job -> this will refresh the whole image
 -> also need to make sure on upload_mip() the cached texture updates it's mipmap count and resolutions with the one the loader thread read, because this could change -> if our mipmap info is out of date thats okay, since it only determines the load priorities
 
DONE:
 test my cool image viewer approach
 -> implemted zooming, works really well
 
 add proper directory input
 -> works very good, at least for dev use

 added actual async disk-to-ram loading of full size images using a thread pool
 -> really cool, and worked without any problems

 implemented fullscreen toggle
 implemented window placement saving and restore when restarting app

 prototype of texture streamer:
  -> always downsize image to exactly the size it is viewed at and evict textures as soon as they disappear or are viewed at different sizes
   -> needed to cancel jobs (and ignore job results that are no longer needed (ie. should have been canceled but were already in processing)) to not create giant workloads when zooming
   -> images only start being visible after zooming has stopped and there is a very big workload constantly -> not a good system
 
 implemented dragging around
